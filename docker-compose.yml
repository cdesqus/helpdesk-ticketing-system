version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: helpdesk-postgres
    environment:
      POSTGRES_DB: helpdesk
      POSTGRES_USER: helpdesk_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-helpdesk_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - helpdesk-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U helpdesk_user -d helpdesk"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: helpdesk-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-helpdesk_redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - helpdesk-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-helpdesk_redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Helpdesk Application
  helpdesk-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: helpdesk-app
    environment:
      # Database configuration
      DATABASE_URL: postgres://helpdesk_user:${POSTGRES_PASSWORD:-helpdesk_password}@postgres:5432/helpdesk
      
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-helpdesk_redis_password}@redis:6379
      
      # JWT Secret
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      
      # SMTP Configuration (optional)
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      
      # Application settings
      NODE_ENV: production
      PORT: 4000
      
      # Domain configuration for production
      DOMAIN_NAME: ${DOMAIN_NAME:-localhost}
      
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - helpdesk-network
    restart: unless-stopped
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: helpdesk-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      helpdesk-app:
        condition: service_healthy
    networks:
      - helpdesk-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Database backup service
  db-backup:
    image: postgres:15-alpine
    container_name: helpdesk-backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-helpdesk_password}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./backups:/backups
      - ./scripts/backup-cron.sh:/backup-cron.sh:ro
    command: >
      sh -c "
        echo '0 2 * * * /backup-cron.sh' | crontab - &&
        crond -f
      "
    depends_on:
      - postgres
    networks:
      - helpdesk-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Watchtower for automatic updates (optional)
  watchtower:
    image: containrrr/watchtower
    container_name: helpdesk-watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400  # Check daily
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=false
    restart: unless-stopped
    profiles:
      - watchtower  # Only start with --profile watchtower
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  helpdesk-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
